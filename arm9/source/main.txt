/*-----------------------------------------------------------------
 Copyright (C) 2005 - 2013
	Michael "Chishm" Chisholm
	Dave "WinterMute" Murphy
	Claudio "sverx"

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

------------------------------------------------------------------*/
#include <nds.h>
#include <stdio.h>
#include <fat.h>
#include <sys/stat.h>
#include <limits.h>

#include <string.h>
#include <unistd.h>

#include "nds_loader_arm9.h"
#include "file_browse.h"
#include "inifile.h"

const char* settingsinipath = "sd:/_nds/dsimenuplusplus/settings.ini";
const char* bootstrapinipath = "sd:/_nds/nds-bootstrap.ini";

std::string pergamesettingspath="sd:/kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";

std::string ndsPath;
std::string savePath;

typedef struct {
	char gameTitle[12];			//!< 12 characters for the game title.
	char gameCode[4];			//!< 4 characters for the game code.
} sNDSHeadertitlecodeonly;

static bool soundfreq = false;	// false == 32.73 kHz, true == 47.61 kHz

PrintConsole upperScreen;
PrintConsole lowerScreen;

void displayInit() {
	lowerScreen = *consoleDemoInit();
	videoSetMode(MODE_0_2D);
	vramSetBankA(VRAM_A_MAIN_BG);
	consoleInit(&upperScreen, 3, BgType_Text4bpp, BgSize_T_256x256, 31, 0, true, true);
}

std::string ReplaceAll(std::string str, const std::string& from, const std::string& to) {
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
    }
    return str;
}

void SetTargetRom() {
	
	std::string filename;
	std::vector<std::string> extensionList={".ini"};
	
	consoleSelect(&upperScreen);
	iprintf("Select the location of the \"nds-bootstrap.ini\" file");
	consoleSelect(&lowerScreen);
	filename = browseForFile(extensionList);
	CIniFile bootstrap_template(filename.c_str());
	extensionList.clear();
	extensionList.push_back(".nds");
	
	consoleSelect(&upperScreen);
	consoleClear();
	iprintf("Select the target rom");
	consoleSelect(&lowerScreen);
	chdir("/");
	ndsPath = browseForFile(extensionList);
	bootstrap_template.SetString( "NDS-BOOTSTRAP", "NDS_PATH", ndsPath.c_str());
	savePath = ReplaceAll(ndsPath, ".nds", ".sav");
	bootstrap_template.SetString( "NDS-BOOTSTRAP", "SAV_PATH", savePath.c_str());
	soundfreq = bootstrap_template.GetInt("NDS-BOOTSTRAP", "SOUND_FIX", 0);
	bootstrap_template.SaveIniFile(pergamesettingspath.c_str());
	bootstrap_template.SaveIniFile(bootstrapinipath);
}

void LoadSettings(void) {
	CIniFile settingsini(pergamesettingspath.c_str());
	soundfreq = settingsini.GetInt("NDS-BOOTSTRAP", "SOUND_FIX", 0);
	ndsPath = settingsini.GetString( "NDS-BOOTSTRAP", "NDS_PATH", "");
	savePath = settingsini.GetString( "NDS-BOOTSTRAP", "SAV_PATH", "");
	
	settingsini.SaveIniFile(bootstrapinipath);
}

static bool arm7SCFGLocked = false;

//---------------------------------------------------------------------------------
void stop (void) {
//---------------------------------------------------------------------------------
	while (1) {
		swiWaitForVBlank();
	}
}

int lastRanROM() {
	if(soundfreq) fifoSendValue32(FIFO_USER_07, 2);
	else fifoSendValue32(FIFO_USER_07, 1);
	
	char game_TID[5];
	FILE *f_nds_file = fopen(ndsPath.c_str(), "rb");
	fseek(f_nds_file, offsetof(sNDSHeadertitlecodeonly, gameCode), SEEK_SET);
	fread(game_TID, 1, 4, f_nds_file);
	game_TID[4] = 0;
	game_TID[3] = 0;
	fclose(f_nds_file);
	if (access(savePath.c_str(), F_OK) && strcmp(game_TID, "###") != 0) {
		displayInit();
		consoleSelect(&lowerScreen);
		printf("Creating save file...\n");
		static const int BUFFER_SIZE = 4096;
		char buffer[BUFFER_SIZE];
		memset(buffer, 0, sizeof(buffer));
		int savesize = 524288;	// 512KB (default size for most games)
		// Set save size to 8KB for the following games
		if (strcmp(game_TID, "ASC") == 0 )	// Sonic Rush
		{
			savesize = 8192;
		}
		// Set save size to 256KB for the following games
		if (strcmp(game_TID, "AMH") == 0 )	// Metroid Prime Hunters
		{
			savesize = 262144;
		}
		// Set save size to 1MB for the following games
		if ( strcmp(game_TID, "AZL") == 0		// Wagamama Fashion: Girls Mode/Style Savvy/Nintendo presents: Style Boutique/Namanui Collection: Girls Style
			|| strcmp(game_TID, "BKI") == 0 )	// The Legend of Zelda: Spirit Tracks
		{
			savesize = 1048576;
		}
		// Set save size to 32MB for the following games
		if (strcmp(game_TID, "UOR") == 0 )	// WarioWare - D.I.Y. (Do It Yourself)
		{
			savesize = 1048576*32;
		}
		FILE *pFile = fopen(savePath.c_str(), "wb");
		if (pFile) {
			for (int i = savesize; i > 0; i -= BUFFER_SIZE) {
				fwrite(buffer, 1, sizeof(buffer), pFile);
			}
			fclose(pFile);
		}
		printf("Save file created!\n");
		
		for (int i = 0; i < 30; i++) {
			swiWaitForVBlank();
		}
	}
	return runNdsFile ("sd:/_nds/nds-bootstrap-release.nds", 0, NULL, true);
}

//---------------------------------------------------------------------------------
int main(int argc, char **argv) {
//---------------------------------------------------------------------------------

	// overwrite reboot stub identifier
	extern u64 *fake_heap_end;
	*fake_heap_end = 0;

	defaultExceptionHandler();
	
	if (!fatInitDefault()) {
		displayInit();
		consoleSelect(&lowerScreen);
		printf("fatInitDefault failed!");
		stop();
	}
	
	scanKeys();
	int keys = keysDown();
	FILE *f=fopen(pergamesettingspath.c_str(), "rb");
	if(f && !(keys&KEY_A)){
		fclose(f);
		LoadSettings();
	 } else {
		displayInit();
		consoleSelect(&lowerScreen);
		SetTargetRom();
	}
	
	
	swiWaitForVBlank();

	fifoWaitValue32(FIFO_USER_06);
	if (fifoGetValue32(FIFO_USER_03) == 0) arm7SCFGLocked = true;	// If DSiMenu++ is being ran from DSiWarehax or flashcard, then arm7 SCFG is locked.

	fifoSendValue32(FIFO_USER_07, 0);

	int err = lastRanROM();
	displayInit();
	consoleSelect(&lowerScreen);
	iprintf ("Start failed. Error %i", err);
	stop();

	return 0;
}
